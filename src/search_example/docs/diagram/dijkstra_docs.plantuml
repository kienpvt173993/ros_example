@startuml Dijkstra Psudocode
start

:Get cell index of Start;
:Get cell index of Goal;
if(Start and Stop Point is avaible?) then (yes)
else (no)
    : "return nullptr";
    end;
endif;

partition "**function** Finish Table" {
    note
        Finish Table Cost - **//finishTable//**
        ----
        //Identify all inaccessible points.//
        //Each point in the table has//
        //a previous node and associated cost.//
    end note
    :Assign a cost of 0.0 to the cell,
    including the starting position;
    :Add the adjacent cells surrounding
    the starting cell as variables and
    append them to the open list;
    repeat
        :Save open list to save list;
        :Clear open list;
        repeat
            :Pop a (**check cell**) cell in open list;
            :Get surrounding this points;
            partition "**function** Update Point Around" {
                note
                    Update Point Around - **//updatePointAround//**
                    ----
                    //Update cost and previous node of point.//
                    //Add new point to open list//
                end note
                repeat
                    :Pop a cell from surrounding points;
                    :Calculate cell cost from **check cell**;
                    if(First time update this cell) then (yes)
                        :Push this cell to open list;
                    else(no)
                    endif;
                    if(New cost is smaller than old cost) then (yes)
                        :Update cost and previous node of this cell;
                    else(no)
                    endif;
                repeat while (Check all surrounding point) is (no)
                ->yes;
            }
        repeat while (Update all point in save list?) is (no)
        ->yes;
    repeat while (open list is empty?) is (no)
        ->yes;
}

partition "**process** Path from table" {
    note
        "Create Path from table - **//fromGoalToPath//**" 
        ----
        //Create path from table using link list.//
    end note
    if(Have trajectory to goal?) then(yes)
        ' break
    else (no)
        : "return nullptr";
        end
    endif
    :Add start position to path;
    repeat
        :Add center of cell to path;
    repeat while (In start cell?) is (no)
    ->yes;
    :Add goal position to path;
    :Return path;
}
end
@enduml
