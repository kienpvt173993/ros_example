@startuml Class Diagram

class main {
  +main(in argc: int, int argv: char **): int
}

class search_example::DataInterface{
    #path_pub_: rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr
    #map_pub_: rclcpp::Publisher<nav_msgs::msg::OccupancyGrid>::SharedPtr
    #goal_sub_: rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr
    #start_sub_: rclcpp::Subscription<geometry_msgs::msg::PoseWithCovarianceStamped>::SharedPtr
    #re_pub_map_: rclcpp::Subscription<std_msgs::msg::Empty>::SharedPtr
    #algorithm_: AlgorithmBase

    +startSub(in msg: geometry_msgs::msg::PoseWithCovarianceStamped::SharedPtr): void
    +goalSub(in msg: geometry_msgs::msg::PoseStamped::SharedPtr): void
    +rePublishMap(in msg: std_msgs::msg::Empty::SharedPtr): void
    +mapLoader(in file_name: const std::string): void
    +declareParam(): void
    +getParam(): void
    +start(): void
}

abstract class search_example::AlgorithmBase{
    +{abstract} initialize(in parent: const rclcpp::Node::WeakPtr&) = 0: void
    +{abstract} setMap(inout grid: nav_msgs::msg::OccupancyGrid::SharedPtr) = 0: void
    +{abstract} setStart(in start: const geometry_msgs::msg::Pose2D) = 0: void
    +{abstract} setGoal(in goal: const geometry_msgs::msg::Pose2D) = 0: void
    +{abstract} getPath() = 0: nav_msgs::msg::Path*
}

class search_example::algorithm::Dijkstra{
    #node_: rclcpp::Node::SharedPtr
    #map_: std::map<uint64_t, DijkstraCell::SharedPtr>
    #goal_: geometry_msgs::msg::Pose2D
    #start_: geometry_msgs::msg::Pose2D
    #meta_data_: nav_msgs::msg::MapMetaData::SharedPtr

    +initialize(in parent: const rclcpp::Node::WeakPtr&): void
    +setMap(inout grid: nav_msgs::msg::OccupancyGrid::SharedPtr): void
    +setStart(in start: const geometry_msgs::msg::Pose2D): void
    +setGoal(in goal: const geometry_msgs::msg::Pose2D): void
    +getPath(): nav_msgs::msg::Path*
    #resetMap(): void
    #updatePointAround(in cell: DijkstraCell::SharedPtr&, inout update_cells: std::vector<uint64_t>&): void
    #finishTable(in start_key: const uint64_t&): void
    #fromGoalToPath(in goal_key: const uint64_t&): nav_msgs::msg::Path*
}

class search_example::algorithm::AStart{
    #node_: rclcpp::Node::SharedPtr
    #table_: std::vector<CellCost::SharedPtr>
    #goal_: geometry_msgs::msg::Pose2D
    #start_: geometry_msgs::msg::Pose2D
    #meta_data_: nav_msgs::msg::MapMetaData::SharedPtr

    +initialize(in parent: const rclcpp::Node::WeakPtr&): void
    +setMap(inout grid: nav_msgs::msg::OccupancyGrid::SharedPtr): void
    +setStart(in start: const geometry_msgs::msg::Pose2D): void
    +setGoal(in goal: const geometry_msgs::msg::Pose2D): void
    +getPath(): nav_msgs::msg::Path*
    #resetMap(): void
    #updatePointAround(in index: const size_t&, in goal_index: const size_t&, inout open_list: std::vector<size_t>&): void
    #finishTable(in start_index: const size_t&, in goal_index: const size_t&): void
    #gScore(in index: const size_t&, in pre_cell_index: const size_t&): double
    #hScore(in index: const size_t&, in goal_index: const size_t&): double
    fScore(in index: const size_t&, in pre_cell_index: const size_t&, in goal_index: const size_t&): double
    #fromGoalToPath(in goal_index: const size_t&): nav_msgs::msg::Path*
}

struct CellCost{
    +cost: double
    +g_cost: double
    +pre_cell: CellCost*
    +state: CellState
    +index: const size_t
    +reset(): void
}

enum CellState {
  unread
  close
  open
  constant
}

class DijkstraCell{
    #cost_: double
    #col_: uint32_t
    #row_: uint32_t
    #prev_cell_: DijkstraCell*
    +DijkstraCell(int col: uint32_t, int row: uint32_t)
    +getHashAround() const: std::vector<uint64_t>
    +getHash(): uint64_t
    +setPreCell(in prev: DijkstraCell*) void
    +DijkstraCell(): DijkstraCell*
    +getPoint(): std::pair<uint32_t, uint32_t>
    +setCost(in cost: double): void
    +getCost(): double
}

CellCost <-- CellState
search_example::algorithm::AStart <-- CellCost
search_example::AlgorithmBase <|-- search_example::algorithm::AStart
search_example::algorithm::Dijkstra <-- DijkstraCell
search_example::AlgorithmBase <|-- search_example::algorithm::Dijkstra
search_example::DataInterface <-- search_example::AlgorithmBase
main <-- search_example::DataInterface
@enduml
